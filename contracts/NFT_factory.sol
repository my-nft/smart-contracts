// SPDX-License-Identifier: MIT


pragma solidity 0.8.4;

import "./dependencies/Context.sol";
import "./dependencies/AccessControl.sol";
import "./dependencies/ERC721A.sol";
import "./dependencies/IERC721Receiver.sol";
import "./dependencies/Address.sol";
import "./dependencies/Strings.sol";
/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 */
contract NFT_factory is Context, AccessControl, ERC721A {

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    address public owner;
    bool public whitelistingEnabled = false;
    bool public mintingEnabled = true;
    uint256 public maxPerWallet = 100;

    /**
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory name, string memory symbol, string memory baseURI) public ERC721A(name, symbol) {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());

        _setBaseURI(baseURI);

        owner = msg.sender;
    }



    function setURI(string memory baseURI) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role");
        _setBaseURI(baseURI);

    }

    function setMaxPerWallet(uint256 _maxPerWallet) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have minter role to mint");
        maxPerWallet = _maxPerWallet;

    }


    function setOwner(address _owner) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role to mint");
        owner = _owner;

    }

    function toggleMinting(bool _bool) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role to mint");
        mintingEnabled = _bool;

    }

    function toggleWhitelisting(bool _toggle) public virtual {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role");
        whitelistingEnabled = _toggle;

    }



    function Whitelist(address[] memory _beneficiaries) external {
      require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role");
      for (uint256 i = 0; i < _beneficiaries.length; i++) {
        whitelists[_beneficiaries[i]] = true;
      }
    }

    function bulkMint(address[] memory _beneficiaries) external {
      require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "NonFungibleToken: must have admin role");
      for (uint256 i = 0; i < _beneficiaries.length; i++) {

        _safeMint(_beneficiaries[i], 1);
      }
    }




    function contractURI() public view returns (string memory) {
        return string(abi.encodePacked(_getbaseURI(), "contract-metadata.json"));
    }



    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "NonFungibleToken: must have minter role to mint");
        require(whitelists[to] || ! whitelistingEnabled, "User not whitelisted !");

        require(mintingEnabled, "Minting not enabled !");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _safeMint(to, 1);
        require(balanceOf(to) <= maxPerWallet, "Max NFTs reached by wallet");
    }
    function mint(address to, uint256 quantity) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "NonFungibleToken: must have minter role to mint");
        require(whitelists[to] || ! whitelistingEnabled, "User not whitelisted !");

        require(mintingEnabled, "Minting not enabled !");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _safeMint(to, quantity);
        require(balanceOf(to) <= maxPerWallet, "Max NFTs reached by wallet");
    }
    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721A) {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
