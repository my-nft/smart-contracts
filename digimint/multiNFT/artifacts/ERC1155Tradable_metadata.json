{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "_amounts",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "URI",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "addCopies",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_owners",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_quantities",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "batchMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_initialOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_initialSupply",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "create",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creationFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "creators",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isOperator",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "metauri",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_newBaseMetadataURI",
						"type": "string"
					}
				],
				"name": "setBaseMetadataURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "setCreator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokenSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "uri",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balanceOf(address,uint256)": {
					"params": {
						"_id": "ID of the Token",
						"_owner": "The address of the token holder"
					},
					"returns": {
						"_0": "The _owner's balance of the Token type requested"
					}
				},
				"balanceOfBatch(address[],uint256[])": {
					"params": {
						"_ids": "ID of the Tokens",
						"_owners": "The addresses of the token holders"
					},
					"returns": {
						"_0": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
					}
				},
				"batchMint(address,uint256[],uint256[],bytes)": {
					"details": "Mint tokens for each id in _ids",
					"params": {
						"_data": "Data to pass if receiver is contract",
						"_ids": "Array of ids to mint",
						"_quantities": "Array of amounts of tokens to mint per id",
						"_to": "The address to mint tokens to"
					}
				},
				"create(address,uint256,string,bytes)": {
					"details": "Creates a new token type and assigns _initialSupply to an address NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)",
					"params": {
						"_data": "Data to pass if receiver is contract",
						"_initialOwner": "address of the first owner of the token",
						"_initialSupply": "amount to supply the first owner",
						"_uri": "Optional URI for this token type"
					},
					"returns": {
						"_0": "The newly created token ID"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_operator": "Address of authorized operator",
						"_owner": "The owner of the Tokens"
					}
				},
				"metauri(uint256)": {
					"details": "URIs are defined in RFC 3986.      URIs are assumed to be deterministically generated based on token ID      Token IDs are assumed to be represented in their hex format in URIs",
					"returns": {
						"_0": "URI string"
					}
				},
				"mint(address,uint256,uint256,bytes)": {
					"details": "Mints some amount of tokens to an address",
					"params": {
						"_data": "Data to pass if receiver is contract",
						"_id": "Token ID to mint",
						"_quantity": "Amount of tokens to mint",
						"_to": "Address of the future owner of the token"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"params": {
						"_amounts": "Transfer amounts per token type",
						"_data": "Additional data with no specified format, sent in call to `_to`",
						"_from": "Source addresses",
						"_ids": "IDs of each token type",
						"_to": "Target addresses"
					}
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"params": {
						"_amount": "Transfered amount",
						"_data": "Additional data with no specified format, sent in call to `_to`",
						"_from": "Source address",
						"_id": "ID of the token type",
						"_to": "Target address"
					}
				},
				"setApprovalForAll(address,bool)": {
					"params": {
						"_approved": "True if the operator is approved, false to revoke approval",
						"_operator": "Address to add to the set of authorized operators"
					}
				},
				"setBaseMetadataURI(string)": {
					"details": "Will update the base URL of token's URI",
					"params": {
						"_newBaseMetadataURI": "New base URL of token's URI"
					}
				},
				"setCreator(address,uint256[])": {
					"details": "Change the creator address for given tokens",
					"params": {
						"_ids": "Array of Token IDs to change creator",
						"_to": "Address of the new creator"
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"_interfaceID": "The interface identifier, as specified in ERC-165"
					},
					"returns": {
						"_0": "`true` if the contract implements `_interfaceID` and"
					}
				},
				"totalSupply(uint256)": {
					"details": "Returns the total quantity for a token ID",
					"params": {
						"_id": "uint256 ID of the token to query"
					},
					"returns": {
						"_0": "amount of token in existence"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "ERC1155Tradable ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin, like _exists(), name(), symbol(), and totalSupply()",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"balanceOf(address,uint256)": {
					"notice": "Get the balance of an account's Tokens"
				},
				"balanceOfBatch(address[],uint256[])": {
					"notice": "Get the balance of multiple account/token pairs"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Queries the approval status of an operator for a given owner"
				},
				"metauri(uint256)": {
					"notice": "A distinct Uniform Resource Identifier (URI) for a given token."
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"notice": "Send multiple types of Tokens from the _from address to the _to address (with safety call)"
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"notice": "Transfers amount amount of an _id from the _from address to the _to address specified"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens"
				},
				"supportsInterface(bytes4)": {
					"notice": "Query if a contract implements an interface"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"erc1155Tradeable.sol": "ERC1155Tradable"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"dependencies/Address.sol": {
			"keccak256": "0x6baf48b0bd7f61d1b8cc2fb6ed78b9a2a6e50b4f222a507a517402ed4c79289d",
			"urls": [
				"bzz-raw://644267611bc10d8fe63a4a077970126034c15722fa7c1478155c8e98e34cf00f",
				"dweb:/ipfs/QmZxtq3dqntMekMFzLM4vEg8g4hy3rv6Aoffc4Lu4Xe1c6"
			]
		},
		"dependencies/Context.sol": {
			"keccak256": "0xbb3818fdf180752e3e6f5cb1bb80a5bf488b8646fcb5f363d6ec967788167b75",
			"urls": [
				"bzz-raw://75541c2ea8ec4cab382392c5f3e3d2aff99a91367aed3a7d3b73cbe4eef89db5",
				"dweb:/ipfs/QmP5jFBqZAwJvETHTndA3mUnD1hqqbMGFAPnncdok4VNN3"
			]
		},
		"dependencies/ERC1155.sol": {
			"keccak256": "0xb0110544135a3348d5f265c82abb9dec3e05c9e4b41b532c8bee927096f37e30",
			"urls": [
				"bzz-raw://c86fdf8837f5a139ae1d5f07cb32452b7215c6d30a9701110dfb0c73889893da",
				"dweb:/ipfs/QmazoLJCDmdZrHnDeXdZqLpQaovXB8gvtZPtjxLSnUXnia"
			]
		},
		"dependencies/ERC1155Metadata.sol": {
			"keccak256": "0xd627658f0082a9dac080b96324ba63993d7d983634a96efdddda3d33e759db56",
			"urls": [
				"bzz-raw://9841a768a96f8f1ecae24e883421eeef3e167e29ff59dbd5dcc81ec1da6b6009",
				"dweb:/ipfs/QmShipoCsQTUcGjvtPvQdubKWeayx8DTrsANt3hGb7mrsb"
			]
		},
		"dependencies/ERC1155MintBurn.sol": {
			"keccak256": "0xa8b8042d3a39af9e7481a2955867ee3b5c478e2d5a3b726a18d819aa51031f88",
			"urls": [
				"bzz-raw://732d61f12cf52c6a86106407973c3ad31fec381b069e00e6a81b60ca3e2a3300",
				"dweb:/ipfs/QmVzp5WFJKRhcPdzLgGwCqer3vvaoSg9D6p16eQpEbmJ6V"
			]
		},
		"dependencies/IERC1155.sol": {
			"keccak256": "0xe70c95bd1fa2163ce9aeb7aa5b63ff743bee52e10650c933853ca9010749d884",
			"urls": [
				"bzz-raw://11501528eaebbafe3f8b82d0f03c4923a181be55f5b522e76625ae0eb8dd0bbe",
				"dweb:/ipfs/QmXHK1MJiLJxQsWLPp7wXVEXrfJfRC6fxprnX8wTZTuSXZ"
			]
		},
		"dependencies/IERC1155TokenReceiver.sol": {
			"keccak256": "0x4359ac23a5790dc6dcf70863026c6014497bd4f5115e29e6b97abf700b98b783",
			"urls": [
				"bzz-raw://feced65694bd8ffdae2efe034472d667db4814b7e96378226704c1e83848b1e7",
				"dweb:/ipfs/QmdUJ2ZMPd7n9uNGpD8tyYtRHyFZYZejdHzGEjjpTU1CEe"
			]
		},
		"dependencies/Ownable.sol": {
			"keccak256": "0x16e0e470b9eb44c342323c1edcd6eb4cf7566085f2eb25d537347184562306bd",
			"urls": [
				"bzz-raw://a08b0d16d8fa44b5be78c8e6bce3d08c00b54b0277c04081b0777df52552185d",
				"dweb:/ipfs/Qma4djfNRnGWdKce9RpYP6UtS3pJXfYGuzSHfsZsN27SRC"
			]
		},
		"dependencies/SafeMath.sol": {
			"keccak256": "0xe0c18ad0ab73c2d69b28e1dc4184a8a1580c6bc7f0da9813c59ffea19fa29921",
			"urls": [
				"bzz-raw://10f99d6e8142d8f7a4d60f3fbaf7fc4f0c525377e565b08aa41ec60857556a9e",
				"dweb:/ipfs/QmfVneVTsTyncyRpN4cFRYaKs84VwUuSmgCWmvRkFZ9cDY"
			]
		},
		"dependencies/Strings.sol": {
			"keccak256": "0x129fa1bf2247191a6f2a8da3f00c984a7e62c7612c1149b0b7417974f3b3c362",
			"urls": [
				"bzz-raw://8eca51e684a840e7cb179e98ac207c9b9ca76412482d3fc376fdfe7c0131dcb9",
				"dweb:/ipfs/QmXAapvYPzjsj967bu5gh1sQQb4QhXrgtHzzeMmmkbsRfv"
			]
		},
		"erc1155Tradeable.sol": {
			"keccak256": "0x519ddf11c018847450a7eae37af5ea479c9c9a8baa844c8c6933dce570d7af9b",
			"license": "MIT",
			"urls": [
				"bzz-raw://e236c854c56d7f52c108d81a33a0b6b21f82f539abe3f5a1584ddbb7f217819a",
				"dweb:/ipfs/QmarkCiu5XvYfvw5xUbwWfr9ExmaX8kDj3iK8DgbXEBWRH"
			]
		}
	},
	"version": 1
}